    Постановка задачи

На сервере лежат несколько основных задач: 
 1. Хранение информации о книгах 
 2. Поддержание базы в корректном состоянии (совместная задача с analyzer)
 3. Мощный удобный поиск 
 4. Представление информации для пользователя (xhtml, opds) 
 5. Структурирование информации (категории, тэги, ...) 


Структура сервера делится на 2 части.

Первая (Андрей), это внутреннее представление (хранение информации, поиск по ней) и интерфейс для аналайзера.

Вторая (Катя) -- внешняя, то, что видит пользователь. Это реализация интерфейса xhtml, opds. Структурирование, представление информации в удобном для пользовалеля виде (теги, жанры,...)

Дополнительно
Так возникают дополнительные задачи:
 1. Документирование; средства, инструкции для развертывания; поддержание продукта в неком корректном состоянии.
 2. Расширение имеющейся информации, сбор информации из других источников (wikipedia, amazon, feedbooks)
 3. Сбор информации о популярности книг, авторов с внешних ресурсов (рекомендательных сервисов)
 4. Проверка и исправление информации из внешних ресурсов.



    Реализовано

Внутреннее представление (Андрей)

  Описана модель данных, обеспечивающая хранение информации.
  Создан интефейс для аналайзера, позволяющий добавлять, обновлять информацию в базу (ныне устаревший).
  Прикручен sphinx поиск, есть возможность искать по именам авторов (используется soundex), по названиям книг (с учётом морфологии английского языка).
  Интерфейс sphinx поиска для аналайзера, результаты отсортированы по релевантности (степени схожести запроса с результатом), также индексы релевантности указаны с сущностями.
  Всё это дело поднято в интернете, в базе лежит порядка 26 тысяч книг.


Внешнее представление (Катя)

  Реализовано представление данных в форматах OPDS и XHTML.
  Для каждого из форматов реализовано:
    - каталог
        В каталоге реализованы различные разбиения множества книг ( по авторам, языкам, жанрам)
    - поиск ( простой и расширенный)
        Расширенный поиск позволяет искать книги отдельно по заголовку, имени автора, языку, жанру.
    - Вывод информации об отдельной книге
    - Вывод информации об авторе ( + список ассоциированных с ним книг)

  Релевантность. Усовершенствовать вывод результатов простого поиска (пример, если в результатах поиска есть полное совпадение с именем автора - первой должна идти ссылка на этого автора)    
  Реализован обучаемый классификатор книг, позволяющий по описанию книги сделать предположение о ее жанре. Классификатор построен на основе наивного Байесовского классификатора с использованием алгоритма Фишера.
  


    Планы

Внутреннее представление (Андрей)

  Сделать поиск по русским книгам
  Доделать sphinx поиск по описаниям книг, сделать advanced поиск.
  Улучшить результаты поиска по авторам, advenced поиска (учитывать расстояние между именами)
  Сделать (новый) интрефейс добаления информации для аналайзера (по id сущностей)
  Более тесная интеграция с аналайзером, заострение внимания на алгоритме взаимодействия с аналайзером.


Внешнее представление (Катя)

  Разбиения множества книг на основе года написания ( для этого необходимо реализовать поиск внешней информации)

  Классификация авторов по жанрам в которых он пишет, видимо, с помощью поиска на внешних ресурсах. Всю найденную внешнюю информацию добавлять в нашу модель
  Возможно, рекоммендательная система.
  Авторизация пользователей (дать пользователю возможность хранить информацию). Видимо, только для пользователей web-интерфейса 



    Вопросы

Внутреннее представление (Андрей)

  Решить вропрос с модерированием
  Что делать с диакритикой


Внешнее представление (Катя)

  Нужна ли авторизация пользователям. Дает широкие возможности для дальнейшего совершенствования. С другой стороны, это не очень вяжется с клиентскими программами.
