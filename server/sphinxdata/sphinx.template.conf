source authors_soundex
{
    type                = mysql
    sql_host            = localhost
    sql_user            = root
    sql_pass            = ******
    sql_db              = project2
    sql_port            = 

    sql_query_pre       =
    sql_query_post      =
    sql_query           = \
        SELECT id, name\
        FROM book_author
    sql_query_info      = SELECT * FROM `book_author` WHERE `id` = $id
}

index authors_soundex
{
    source          = authors_soundex
    path            = /home/an/projects/ebooksearchtool/server/sphinxdata/author_soundex_inner
    docinfo         = extern
    morphology      = soundex
    stopwords       =
    min_word_len    = 2
    charset_type    = utf-8
    min_prefix_len  = 0
    min_infix_len   = 0
}




source authors_simple
{
    type                = mysql
    sql_host            = localhost
    sql_user            = root
    sql_pass            = ******
    sql_db              = project2
    sql_port            = 

    sql_query_pre       =
    sql_query_post      =
    sql_query           = \
        SELECT id, name\
        FROM book_author
    sql_query_info      = SELECT * FROM `book_author` WHERE `id` = $id
}

index authors_simple
{
    source          = authors_simple
    path            = /home/an/projects/ebooksearchtool/server/sphinxdata/author_simple
    docinfo         = extern
    morphology      = none
    stopwords       =
    min_word_len    = 2
    charset_type    = utf-8
    min_prefix_len  = 0
    min_infix_len   = 0
}




source book_simple
{
    type                = mysql
    sql_host            = localhost
    sql_user            = root
    sql_pass            = ******
    sql_db              = project2
    sql_port            = 

    sql_query_pre       =
    sql_query_post      =
    sql_query           = \
        SELECT id, title\
        FROM book_book
    sql_query_info      = SELECT * FROM `book_book` WHERE `id` = $id
}

index book_simple
{
    source          = book_simple
    path            = /home/an/projects/ebooksearchtool/server/sphinxdata/book_simple
    docinfo         = extern
    morphology      = stem_en
    stopwords       =
    min_word_len    = 2
    charset_type    = utf-8
    min_prefix_len  = 0
    min_infix_len   = 0
}



source book_title_annotation
{
    type                = mysql
    sql_host            = localhost
    sql_user            = root
    sql_pass            = ******
    sql_db              = project2
    sql_port            = 

    sql_query_pre       =
    sql_query_post      =
    sql_query           = \
        SELECT id, title\
        FROM book_book
    sql_query_info      = SELECT * FROM `book_book` WHERE `id` = $id
}

index book_title_annotation
{
    source          = book_title_annotation
    path            = /home/an/projects/ebooksearchtool/server/sphinxdata/book_title_annotation
    docinfo         = extern
    morphology      = stem_en
    stopwords       =
    min_word_len    = 2
    charset_type    = utf-8
    min_prefix_len  = 0
    min_infix_len   = 0
}





searchd
{
	# hostname, port, or hostname:port, or /unix/socket/path to listen on
	# multi-value, multiple listen points are allowed
	# optional, default is 0.0.0.0:9312 (listen on all interfaces, port 9312)
	#
	# listen				= 127.0.0.1
	# listen				= 192.168.0.1:9312
	# listen				= 9312
	# listen				= /var/run/searchd.sock
    listen = 127.0.0.1:3312


	# log file, searchd run info is logged here
	# optional, default is 'searchd.log'
	log					= /tmp/sphinx/searchd.log

	# query log file, all search queries are logged here
	# optional, default is empty (do not log queries)
	query_log			= /tmp/sphinx/query.log

	# client read timeout, seconds
	# optional, default is 5
	read_timeout		= 5

	# request timeout, seconds
	# optional, default is 5 minutes
	client_timeout		= 300

	# maximum amount of children to fork (concurrent searches to run)
	# optional, default is 0 (unlimited)
	max_children		= 30

	# PID file, searchd process ID file name
	# mandatory
	pid_file			= /home/an/projects/ebooksearchtool/server/sphinxdata/searchd.pid

	# max amount of matches the daemon ever keeps in RAM, per-index
	# WARNING, THERE'S ALSO PER-QUERY LIMIT, SEE SetLimits() API CALL
	# default is 1000 (just like Google)
	max_matches			= 1000

	# seamless rotate, prevents rotate stalls if precaching huge datasets
	# optional, default is 1
	seamless_rotate		= 1

	# whether to forcibly preopen all indexes on startup
	# optional, default is 0 (do not preopen)
	preopen_indexes		= 0

	# whether to unlink .old index copies on succesful rotation.
	# optional, default is 1 (do unlink)
	unlink_old			= 1

	# attribute updates periodic flush timeout, seconds
	# updates will be automatically dumped to disk this frequently
	# optional, default is 0 (disable periodic flush)
	#
	# attr_flush_period	= 900


	# instance-wide ondisk_dict defaults (per-index value take precedence)
	# optional, default is 0 (precache all dictionaries in RAM)
	#
	# ondisk_dict_default	= 1


	# MVA updates pool size
	# shared between all instances of searchd, disables attr flushes!
	# optional, default size is 1M
	mva_updates_pool	= 1M

	# max allowed network packet size
	# limits both query packets from clients, and responses from agents
	# optional, default size is 8M
	max_packet_size		= 8M

	# crash log path
	# searchd will (try to) log crashed query to 'crash_log_path.PID' file
	# optional, default is empty (do not create crash logs)
	#
	# crash_log_path		= /var/log/crash


	# max allowed per-query filter count
	# optional, default is 256
	max_filters			= 256

	# max allowed per-filter values count
	# optional, default is 4096
	max_filter_values	= 4096


	# socket listen queue length
	# optional, default is 5
	#
	# listen_backlog		= 5


	# per-keyword read buffer size
	# optional, default is 256K
	#
	# read_buffer			= 256K


	# unhinted read size (currently used when reading hits)
	# optional, default is 32K
	#
	# read_unhinted		= 32K
}
