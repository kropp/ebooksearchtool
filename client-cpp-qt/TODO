Что есть:
	есть оконная программка, содержащая строку для поиска. 
	Полностью реализован самый простой usecase: 
		1. Пользователь набирает в строке поиска одно или несколько слов. 
		2. Ему выдается список книг по этому запросу. Поиск по всему. 
		3. Пользователь щелкает по названию одной из книг. 
		4. Выводится информация только об этой книге, предлагается скачать ее и начать читать. 
		5. Пользователь нажимает на эту ссылку. 
		6. Книга скачивается и открывается с помощью FBReader.

То же, но подробнее: 
Пользователь вводит часть имени книги, которую хочет найти. Строка поиска преобразуется в URL - в соответствии с openSearch (../search.atom?query="то, что ввел пользователь"). Пользователь может также сам редaктировать строку url для выполнения более сложных запросов. Файл скачивается и,  если он в формате atom, тут же передается парсеру. Парсер заполняет модель данных. Представление отображает эту модель. Представление отображает информацию о книгах в формате html. Название книги содержит ссылку, при нажатии на которую скачивается вся информация (в формате atom) о книге по id. Скачанный файл передается парсеру. View переходи в режим отображения информации об одной книге и предлагает начать ее читать. Если пользователь нажимает на ссылку, View просит mainWindow выполнить скачивание. Если скачался файл в формате epub, View создает процесс, в котором пытается ее открыть в FBReader.

	модель данных простая (список книг. Книга содержит название, аннотацию, язык, список авторов. Автор содержит только имя), простое представление этой модели, которое пока показывает информацию о книгах в текстовом виде.
	

Планы:
	на ближайшее время:
        - научиться скачивать обложку
        - реализовать network manager, который будет обрабатывать все запросы
		- реализовать настоящий View. Максимально приближенный к тому, что хочется видеть пользователю.	
		- применить паттерн декоратор для порождения новых моделей (поиск в найденном), отвечающих определенному условию. 
		- придумать удачный способ (для ясности, поиска по ним) хранения языка и атрибутов книги.	

		по улучшению кода:
 		- в парсере могу не хранить так много полей, а заполнять модель на лету.

	на потом:
	
	- возможность отката - хранить 10 последних вариантов модели.
	- возможность выводить в книги алфавитном порядке по автору, по названию

Надо исправить:
	надо, чтобы программа чистила после себя скачанные файлы.
	
Замечания:
    1) во View хотела использовать Layout как контейнер и отдельно указатели на BookWidget не хранить. Получились некоторые проблемы при обращении к BookWidget через Layout. Теперь храню вектор из BookWidget во View. Хотелось бы проблемы решить без добавление вектора.
    2) механизм передачи сигнала от кнопки удалить до самого удаления во View. Взглянуть критически.
    3) придумать нормальное название для виджета с выпадающим-скрывающимся текстом. (для доп информации по книге)
