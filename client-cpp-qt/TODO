Что есть:
	есть оконная программка, содержащая строку для поиска. 
	Полностью реализован самый простой usecase: 
		1. Пользователь набирает в строке поиска одно слово. 
		2. Ему выдается список книг по этому запросу. 
		3. Пользователь щелкает по названию одной из книг. 
		4. Выводится информация только об этой книге, предлагается скачать ее и начать читать. 
		5. Пользователь нажимает на эту ссылку. 
		6. Книга скачивается и открывается с помощью FBReader.

То же, но подробнее: 
Пользователь вводит часть имени книги, которую хочет найти. Строка поиска преобразуется в URL - в соответствии с openSearch (../search.atom?query="то, что ввел пользователь"). Пользователь может также сам редктировать строку url для выполнения более сложных запросов. Файл скачивается и,  если он в формате atom, тут же передается парсеру. Парсер заполняет модель данных. Представление отображает эту модель. Представление отображает информацию о книгах в формате html. Название книги содержит ссылку, при нажатии на которую скачивается вся информация (в формате atom) о книге по id. Скачанный файл передается парсеру. View переходи в режим отображения информации об одной книге и предлагает начать ее читать. Если пользователь нажимает на ссылку, View просит mainWindow выполнить скачивание. Если скачался файл в формате epub, View создает процесс, в котором пытается ее открыть в FBReader.

	модель данных простая (список книг. Книга содержит название, аннотацию, язык, список авторов. Автор содержит только имя), простое представление этой модели, которое пока показывает информацию о книгах в текстовом виде.
	

Планы:
	на ближайшее время:

		косметические:
		2. Возможность настроить proxy, когда программа уже работает.
		
		посерьезнее:
		- отображать во View текст в формате html.  DONE
		- осуществлять взаимодействие с пользователем из view.
		- Реализация модели. Предположительно будет(первые соображения):
			класс Book, поля которого соответствуют всей информации, получаемой с сервера (название, автор, аннотация, ссылки...);
			набор предикатов для Book, в соответствии с которыми пользователь может искать книги в той выборке, которую вернул сервер;
			класс Library, хранящий множество всех книг и реализующий необходимые методы для выборки книг по предикатам.
		- применить паттерн декоратор для порождения новых моделей (поиск в найденном), отвечающих определенному условию. 
		- придумать удачный способ (для ясности, поиска по ним) хранения языка и атрибутов книги.	
			
	на потом:
		визуальное представление:
			- реализовать абстрактный класс compositor и нескольких наследников, которые отвечают за визуальное расположение книг. И класс, который умеет показывать информацию об одной книге (абстрактный интерфейс и наследники, так как книгу можно рисовать по-разному: просто список названий и авторов; обложка, при наведении мышкой на которую всплывает дополнительная информация...)
		логика:
			- когда надо будет обрабатывать большие файлы - возможно реализовать поток(как у Абельсона и Сассмана). Пока не требуется ничего не делаем. Не создавать сразу модель для всех данных, а создавать и обрабатывать ее на лету, по требованию.
			- возможность отката - хранить 10 последних вариантов модели.
			- ? возможность выводить в книги алфавитном порядке по автору, по названию
		
Надо исправить:

